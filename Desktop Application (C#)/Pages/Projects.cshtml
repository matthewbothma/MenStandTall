@page
@model YourNamespace.Pages.ProjectsModel
@{
    ViewData["Title"] = "Projects";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">🌍 Project Overview</h2>

    <!-- Add Project Button -->
    <div class="text-end mb-3">
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addProjectModal">
            <i class="bi bi-plus-circle"></i> Add New Project
        </button>
    </div>

    <!-- Search + Filter -->
    <div class="d-flex justify-content-between mb-3">
        <input type="text" class="form-control w-50" placeholder="Search projects...">
        <select class="form-select w-25 ms-2" id="statusFilter">
            <option value="all">All</option>
            <option value="planning">Planning</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
            <option value="onhold">On Hold</option>
        </select>
    </div>

    <!-- Projects Grid -->
    <div class="row" id="projectsContainer">
        @if (Model.Projects.Any())
        {
            @foreach (var project in Model.Projects)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-lg border-0 rounded-3 project-card" data-status="@project.Status.ToString().ToLower()">
                        <div class="card-body">
                            <h5 class="card-title">@project.Name</h5>
                            <p class="card-text text-muted">@project.Description</p>
                            
                            @{
                                var badgeClass = project.Status switch
                                {
                                    YourNamespace.Pages.ProjectStatus.Active => "bg-primary",
                                    YourNamespace.Pages.ProjectStatus.Completed => "bg-success",
                                    YourNamespace.Pages.ProjectStatus.Planning => "bg-warning",
                                    YourNamespace.Pages.ProjectStatus.OnHold => "bg-secondary",
                                    _ => "bg-secondary"
                                };
                                
                                var progressBarClass = project.Progress switch
                                {
                                    >= 80 => "bg-success",
                                    >= 50 => "bg-info",
                                    >= 25 => "bg-warning",
                                    _ => "bg-danger"
                                };
                            }
                            
                            <span class="badge @badgeClass">@project.Status</span>
                            <p class="mt-2 mb-1">Progress:</p>
                            <div class="progress mb-2">
                                <div class="progress-bar @progressBarClass" style="width: @(project.Progress)%;">@project.Progress%</div>
                            </div>
                            <p class="small text-muted">Due: @project.Deadline.ToString("dd MMM yyyy")</p>
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-sm btn-outline-info">View</button>
                                <button class="btn btn-sm btn-outline-warning">Edit</button>
                                <button class="btn btn-sm btn-outline-danger">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <h4 class="text-muted">No projects found</h4>
                    <p class="text-muted">Click "Add New Project" to get started!</p>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal for Adding Project -->
<div class="modal fade" id="addProjectModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div class="mb-3">
                        <label class="form-label">Project Name</label>
                        <input type="text" name="projectName" class="form-control" placeholder="Enter project name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Deadline</label>
                        <input type="date" name="projectDeadline" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="projectDescription" class="form-control" rows="3" placeholder="Project details" required></textarea>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Add Project</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log('🌍 Projects script starting...');
        
        // Wait for global Firebase to be ready
        function waitForProjectsFirebase(callback) {
            if (window.firebaseAuth) {
                callback();
            } else {
                setTimeout(function() { waitForProjectsFirebase(callback); }, 100);
            }
        }
        
        // Setup projects-specific functionality
        function setupProjects() {
            console.log('🌍 Setting up projects');
            
            if (!window.firebaseAuth) {
                console.error('❌ Firebase auth not available in projects');
                return;
            }
            
            // Authentication check for projects
            window.firebaseAuth.onAuthStateChanged(function(user) {
                if (!user) {
                    console.log('❌ No user in projects, redirecting');
                    window.location.href = '/';
                } else {
                    console.log('✅ Projects user authenticated:', user.email);
                    setupProjectHandlers();
                }
            });
        }
        
        // Setup project functionality
        function setupProjectHandlers() {
            // Filter functionality
            const statusFilter = document.getElementById('statusFilter');
            if (statusFilter) {
                statusFilter.addEventListener('change', function() {
                    const filterValue = this.value.toLowerCase();
                    const cards = document.querySelectorAll('.project-card');
                    
                    cards.forEach(card => {
                        const status = card.getAttribute('data-status');
                        if (filterValue === 'all' || status === filterValue) {
                            card.parentElement.style.display = 'block';
                        } else {
                            card.parentElement.style.display = 'none';
                        }
                    });
                });
            }
            
            // Search functionality
            const searchInput = document.querySelector('input[placeholder="Search projects..."]');
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const cards = document.querySelectorAll('.project-card');
                    
                    cards.forEach(card => {
                        const title = card.querySelector('.card-title').textContent.toLowerCase();
                        const description = card.querySelector('.card-text').textContent.toLowerCase();
                        
                        if (title.includes(searchTerm) || description.includes(searchTerm)) {
                            card.parentElement.style.display = 'block';
                        } else {
                            card.parentElement.style.display = 'none';
                        }
                    });
                });
            }
            
            console.log('✅ Project handlers setup complete');
        }
        
        // Initialize everything when Firebase is ready
        waitForProjectsFirebase(function() {
            console.log('✅ Firebase ready for projects');
            setupProjects();
            console.log('✅ Projects setup complete');
        });
        
        console.log('🌍 Projects script loaded');
    </script>
}