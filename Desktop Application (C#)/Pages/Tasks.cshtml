@page
@model Wilproject.Pages.TasksModel
@{
    ViewData["Title"] = "Task Board";
}

<div class="container-fluid">
    <h1>@ViewData["Title"]</h1>
    <div id="user-info" class="mb-3" style="display: none;"></div>
    
    <div class="row">
        <div class="col">
            <h6>To Do</h6>
            <div class="task-column" id="todo" ondrop="drop(event, 'To Do')" ondragover="allowDrop(event)"></div>
        </div>
        <div class="col">
            <h6>Doing</h6>
            <div class="task-column" id="doing" ondrop="drop(event, 'Doing')" ondragover="allowDrop(event)"></div>
        </div>
        <div class="col">
            <h6>Done</h6>
            <div class="task-column" id="done" ondrop="drop(event, 'Done')" ondragover="allowDrop(event)"></div>
        </div>
    </div>
    
    <div class="mt-4">
        <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#addTaskModal">Add Task</button>
        <button class="btn btn-info mt-2 ms-2" data-bs-toggle="modal" data-bs-target="#viewAllTasksModal" onclick="renderAllTasksModal()">View All Tasks</button>
    </div>
</div>

<!-- Add Task Modal -->
<div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="text" id="newTaskInput" class="form-control mb-2" placeholder="Task name..." />
        <textarea id="newTaskDesc" class="form-control mb-2" placeholder="Description..."></textarea>
        <input type="date" id="newTaskDue" class="form-control mb-2" onchange="updateDueCountdown()" />
        <small id="dueCountdown" class="form-text text-muted mb-2"></small>
        <select id="newTaskPriority" class="form-control mb-2">
            <option value="Low">Low Priority</option>
            <option value="Medium">Medium Priority</option>
            <option value="High">High Priority</option>
        </select>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-primary" onclick="addTaskAndClose()">Add Task</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for viewing all tasks -->
<div class="modal fade" id="viewAllTasksModal" tabindex="-1" aria-labelledby="viewAllTasksModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewAllTasksModalLabel">All Tasks</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="d-flex justify-content-end align-items-center p-2">
          <label for="taskFilter" class="me-2 mb-0">Filter:</label>
          <select id="taskFilter" class="form-control w-auto" onchange="renderAllTasksModal()">
              <option value="all">All</option>
              <option value="deleted">Deleted</option>
              <option value="ongoing">Ongoing</option>
              <option value="completed">Completed</option>
          </select>
      </div>
      <div class="modal-body" id="allTasksModalBody">
        <!-- Tasks will be rendered here -->
      </div>
    </div>
  </div>
</div>

<style>
    .task-column {
        min-height: 300px;
        border: 1px dashed #ccc;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        background-color: #fff;
    }
    .draggable {
        padding: 10px;
        margin: 5px 0;
        background-color: #e9ecef;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: move;
    }
    .completed-task {
        border: 2px solid #28a745 !important;
        background-color: #eafbe7;
    }
    .deleted-task {
        border: 2px solid #dc3545 !important;
        background-color: #fbeaea;
    }
    .todo-task {
        border: 2px solid #007bff !important;
    }
    .doing-task {
        border: 2px solid #fd7e14 !important;
    }
    .done-task {
        border: 2px solid #28a745 !important;
    }
    .active-task {
        border: 2px solid #fd7e14 !important;
        background-color: #fff7e6;
    }
</style>

@section Scripts {
    <script>
        console.log('📝 Tasks script starting...');
        
        let tasks = [];
        let currentUser = null;
        let db = null;

        // Wait for global Firebase to be ready
        function waitForTasksFirebase(callback) {
            if (window.firebaseAuth && window.firebaseDB) {
                callback();
            } else {
                setTimeout(function() { waitForTasksFirebase(callback); }, 100);
            }
        }
        
        // Setup tasks-specific functionality
        function setupTasks() {
            console.log('📝 Setting up tasks');
            
            if (!window.firebaseAuth || !window.firebaseDB) {
                console.error('❌ Firebase not available in tasks');
                return;
            }
            
            db = window.firebaseDB;
            
            // Authentication check for tasks
            window.firebaseAuth.onAuthStateChanged(function(user) {
                if (!user) {
                    console.log('❌ No user in tasks, redirecting');
                    window.location.href = '/';
                } else {
                    currentUser = user;
                    console.log('✅ Tasks user authenticated:', user.email);
                    
                    // Optionally show user info (hidden by default)
                    var userInfoElement = document.getElementById('user-info');
                    if (userInfoElement) {
                        userInfoElement.innerHTML = '<span class="text-success">Logged in as: ' + user.email + '</span>';
                    }
                    
                    loadTasksFromFirestore();
                }
            });
        }

        // Firestore functions
        function loadTasksFromFirestore() {
            if (!db || !currentUser) return;
            
            db.collection('tasks').where('uid', '==', currentUser.uid).get().then(snapshot => {
                tasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderTasksUI();
                console.log('✅ Tasks loaded:', tasks.length);
            }).catch(error => {
                console.error("Error loading tasks: ", error);
            });
        }

        function saveTaskToFirestore(task) {
            if (!db || !currentUser) return;
            
            if (task.id) {
                db.collection('tasks').doc(task.id).set(task);
            } else {
                db.collection('tasks').add({ ...task, uid: currentUser.uid });
            }
        }

        function updateTaskInFirestore(task) {
            if (!db || !currentUser || !task.id) return;
            db.collection('tasks').doc(task.id).set(task);
        }

        function renderTasksUI() {
            ['todo', 'doing', 'done'].forEach(colId => {
                const col = document.getElementById(colId);
                if (col) col.innerHTML = '';
            });
            
            tasks.forEach(task => {
                let targetCol = null;
                if (task.status === 'To Do') {
                    targetCol = document.getElementById('todo');
                } else if (task.status === 'Doing') {
                    targetCol = document.getElementById('doing');
                } else if (task.status === 'Done') {
                    targetCol = document.getElementById('done');
                }
                
                if (targetCol) {
                    targetCol.appendChild(createTaskElement(task.name, task.status, task));
                }
            });
        }

        // Task functions
        function addTask() {
            const taskInput = document.getElementById('newTaskInput');
            const descInput = document.getElementById('newTaskDesc');
            const dueInput = document.getElementById('newTaskDue');
            const priorityInput = document.getElementById('newTaskPriority');
            
            const taskName = taskInput.value.trim();
            const description = descInput.value.trim();
            const dueDate = dueInput.value;
            const priority = priorityInput.value;
            
            if (taskName && currentUser) {
                const newTask = {
                    name: taskName,
                    description: description,
                    dueDate: dueDate,
                    priority: priority,
                    status: 'To Do',
                    uid: currentUser.uid,
                    createdAt: new Date().toISOString()
                };
                
                saveTaskToFirestore(newTask);
                setTimeout(loadTasksFromFirestore, 500);
                
                // Clear form
                taskInput.value = '';
                descInput.value = '';
                dueInput.value = '';
                priorityInput.value = 'Low';
            }
        }

        function addTaskAndClose() {
            addTask();
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTaskModal'));
            if (modal) modal.hide();
        }

        function createTaskElement(taskName, status, taskObj) {
            const taskDiv = document.createElement('div');
            taskDiv.classList.add('draggable', 'd-flex', 'justify-content-between', 'align-items-center', 'flex-column');
            taskDiv.setAttribute('draggable', 'true');
            taskDiv.setAttribute('data-task-name', taskName);
            taskDiv.style.cursor = 'pointer';

            // Add status-based styling
            if (status === 'To Do') taskDiv.classList.add('todo-task');
            else if (status === 'Doing') taskDiv.classList.add('doing-task');
            else if (status === 'Done') taskDiv.classList.add('done-task');

            const headerDiv = document.createElement('div');
            headerDiv.classList.add('w-100', 'd-flex', 'justify-content-between', 'align-items-center');
            
            const nameSpan = document.createElement('span');
            nameSpan.innerHTML = '<strong>' + taskName + '</strong>';
            headerDiv.appendChild(nameSpan);

            const btnGroup = document.createElement('div');
            btnGroup.className = 'btn-group';

            // Status change button
            if (status === 'To Do') {
                const btn = document.createElement('button');
                btn.className = 'btn btn-warning btn-sm';
                btn.innerText = 'Start';
                btn.onclick = function(e) { 
                    e.stopPropagation(); 
                    moveTaskToDoing(taskName); 
                };
                btnGroup.appendChild(btn);
            } else if (status === 'Doing') {
                const btn = document.createElement('button');
                btn.className = 'btn btn-success btn-sm';
                btn.innerText = 'Complete';
                btn.onclick = function(e) { 
                    e.stopPropagation(); 
                    moveTaskToDone(taskName); 
                };
                btnGroup.appendChild(btn);
            }

            headerDiv.appendChild(btnGroup);
            taskDiv.appendChild(headerDiv);

            return taskDiv;
        }

        function moveTaskToDoing(taskName) {
            const task = tasks.find(t => t.name === taskName);
            if (task) {
                task.status = 'Doing';
                updateTaskInFirestore(task);
                setTimeout(loadTasksFromFirestore, 500);
            }
        }

        function moveTaskToDone(taskName) {
            const task = tasks.find(t => t.name === taskName);
            if (task) {
                task.status = 'Done';
                updateTaskInFirestore(task);
                setTimeout(loadTasksFromFirestore, 500);
            }
        }

        // Drag and drop functions
        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drop(ev, status) {
            ev.preventDefault();
            // Add drag and drop functionality here
        }

        function renderAllTasksModal() {
            // Add modal rendering functionality
            console.log('Rendering all tasks modal...');
        }

        function updateDueCountdown() {
            // Add countdown functionality
            console.log('Updating due countdown...');
        }
        
        // Initialize everything when Firebase is ready
        waitForTasksFirebase(function() {
            console.log('✅ Firebase ready for tasks');
            setupTasks();
            console.log('✅ Tasks setup complete');
        });
        
        console.log('📝 Tasks script loaded');
    </script>
}