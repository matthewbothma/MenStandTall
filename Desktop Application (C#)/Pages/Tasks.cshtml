@page
@model Wilproject.Pages.TasksModel
@{
    ViewData["Title"] = "Task Board";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            background-color: #f4f7fa;
        }

        .task-column {
            min-height: 300px;
            border: 1px dashed #ccc;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            background-color: #fff;
        }

        .draggable {
            padding: 10px;
            margin: 5px 0;
            background-color: #e9ecef;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: move;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>@ViewData["Title"]</h1>
        <div class="row">
            <div class="col">
                <h6>To Do</h6>
                <div class="task-column" id="todo" ondrop="drop(event, 'To Do')" ondragover="allowDrop(event)"></div>
            </div>
            <div class="col">
                <h6>Doing</h6>
                <div class="task-column" id="doing" ondrop="drop(event, 'Doing')" ondragover="allowDrop(event)"></div>
            </div>
            <div class="col">
                <h6>Done</h6>
                <div class="task-column" id="done" ondrop="drop(event, 'Done')" ondragover="allowDrop(event)"></div>
            </div>
        </div>
        <div class="mt-4">
            <input type="text" id="newTaskInput" class="form-control mb-2" placeholder="Task name..." />
            <textarea id="newTaskDesc" class="form-control mb-2" placeholder="Description..."></textarea>
            <input type="date" id="newTaskDue" class="form-control mb-2" />
            <select id="newTaskPriority" class="form-control mb-2">
                <option value="Low">Low Priority</option>
                <option value="Medium">Medium Priority</option>
                <option value="High">High Priority</option>
            </select>
            <button class="btn btn-primary mt-2" onclick="addTask()">Add Task</button>
            <button class="btn btn-info mt-2 ml-2" data-toggle="modal" data-target="#viewAllTasksModal" onclick="renderAllTasksModal()">View All Tasks</button>
        </div>
    </div>

    <!-- Modal for viewing all tasks -->
    <div class="modal fade" id="viewAllTasksModal" tabindex="-1" role="dialog" aria-labelledby="viewAllTasksModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="viewAllTasksModalLabel">All Tasks</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body" id="allTasksModalBody">
            <!-- Tasks will be rendered here -->
          </div>
        </div>
      </div>
    </div>

    <script>
        let tasks = [];

        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            const taskName = ev.target.getAttribute('data-task-name');
            ev.dataTransfer.setData("text", taskName);
            ev.dataTransfer.setData("sourceColumn", ev.target.parentNode.id);
        }

        function drop(ev, status) {
            ev.preventDefault();
            const taskName = ev.dataTransfer.getData("text");
            const sourceColumn = ev.dataTransfer.getData("sourceColumn");

            // Find the full task object
            const oldTask = tasks.find(task => task.name === taskName);

            // Remove task from old status
            tasks = tasks.filter(task => task.name !== taskName);

            // Create a new task object with the new status, preserving other info
            const newTask = {
                ...oldTask,
                status: status
            };
            tasks.push(newTask);

            // Append the new task into the correct column
            const targetColumn = document.getElementById(status.toLowerCase().replace(/\s/g, ''));
            const newTaskElement = createTaskElement(newTask.name, newTask.status, newTask);
            targetColumn.appendChild(newTaskElement);

            // Remove the task from the source column
            const sourceColumnElement = document.getElementById(sourceColumn);
            const originalTask = Array.from(sourceColumnElement.children).find(child => child.getAttribute('data-task-name') === taskName);
            if (originalTask) {
                sourceColumnElement.removeChild(originalTask);
            }
        }

        function addTask() {
            const taskInput = document.getElementById('newTaskInput');
            const descInput = document.getElementById('newTaskDesc');
            const dueInput = document.getElementById('newTaskDue');
            const priorityInput = document.getElementById('newTaskPriority');

            const taskName = taskInput.value.trim();
            const description = descInput.value.trim();
            const dueDate = dueInput.value;
            const priority = priorityInput.value;

            if (taskName) {
                const newTask = {
                    name: taskName,
                    description: description,
                    dueDate: dueDate,
                    priority: priority,
                    status: 'To Do'
                };
                tasks.push(newTask);

                const todoColumn = document.getElementById('todo');
                const newTaskElement = createTaskElement(newTask.name, newTask.status, newTask);
                todoColumn.appendChild(newTaskElement);

                taskInput.value = '';
                descInput.value = '';
                dueInput.value = '';
                priorityInput.value = 'Low';
            }
        }

        function createTaskElement(taskName, status, taskObj) {
            const taskDiv = document.createElement('div');
            taskDiv.classList.add('draggable', 'd-flex', 'justify-content-between', 'align-items-center', 'flex-column');
            taskDiv.setAttribute('draggable', 'true');
            taskDiv.setAttribute('ondragstart', 'drag(event)');
            taskDiv.setAttribute('data-task-name', taskName);
            taskDiv.style.cursor = 'pointer';

            // Priority color
            let priorityClass = 'badge-success'; // Low
            if (taskObj?.priority === 'High') {
                priorityClass = 'badge-danger';
            } else if (taskObj?.priority === 'Medium') {
                priorityClass = 'badge-warning';
            }

            // Task name (always visible)
            const headerDiv = document.createElement('div');
            headerDiv.classList.add('w-100', 'd-flex', 'justify-content-between', 'align-items-center');
            const nameSpan = document.createElement('span');
            nameSpan.innerHTML = `<strong>${taskName}</strong>`;
            headerDiv.appendChild(nameSpan);

            // Button
            const actionBtn = document.createElement('button');
            actionBtn.className = 'btn btn-sm ml-2';

            if (status === 'To Do') {
                actionBtn.classList.add('btn-warning');
                actionBtn.innerText = 'Doing';
                actionBtn.onclick = function (e) {
                    e.stopPropagation();
                    moveTaskToDoing(taskName);
                };
            } else if (status === 'Doing') {
                actionBtn.classList.add('btn-info');
                actionBtn.innerText = 'Done';
                actionBtn.onclick = function (e) {
                    e.stopPropagation();
                    moveTaskToDone(taskName);
                };
            } else if (status === 'Done') {
                actionBtn.classList.add('btn-success');
                actionBtn.innerText = 'Complete';
                actionBtn.onclick = function (e) {
                    e.stopPropagation();
                    moveTaskToAllTasks(taskName);
                };
            } else if (status === 'View All Tasks') {
                actionBtn.classList.add('btn-secondary');
                actionBtn.innerText = 'Restore';
                actionBtn.onclick = function (e) {
                    e.stopPropagation();
                    moveTaskToTodo(taskName);
                };
            }

            headerDiv.appendChild(actionBtn);

            // Details (hidden by default)
            const detailsDiv = document.createElement('div');
            detailsDiv.style.display = 'none';
            detailsDiv.classList.add('w-100', 'mt-2');
            detailsDiv.innerHTML = `
                <small>${taskObj?.description || ''}</small><br>
                <span class="badge ${priorityClass}">${taskObj?.priority || ''}</span>
                ${taskObj?.dueDate ? `<span class="badge badge-light ml-2">Due: ${taskObj.dueDate}</span>` : ''}
            `;

            // Toggle details on click
            taskDiv.onclick = function () {
                detailsDiv.style.display = detailsDiv.style.display === 'none' ? 'block' : 'none';
            };

            // Prevent button click from toggling details
            actionBtn.onclick = function (e) {
                e.stopPropagation();
                if (status === 'To Do') moveTaskToDoing(taskName);
                else if (status === 'Doing') moveTaskToDone(taskName);
                else if (status === 'Done') moveTaskToAllTasks(taskName);
                else if (status === 'View All Tasks') moveTaskToTodo(taskName);
            };

            taskDiv.appendChild(headerDiv);
            taskDiv.appendChild(detailsDiv);

            return taskDiv;
        }

        // Add this function for moving to "Doing"
        function moveTaskToDoing(taskName) {
            removeTaskFromAllColumns(taskName);
            const oldTask = tasks.find(task => task.name === taskName);
            tasks = tasks.filter(task => task.name !== taskName);
            tasks.push({ ...oldTask, status: 'Doing' });

            const doingColumn = document.getElementById('doing');
            const newTaskElement = createTaskElement(taskName, 'Doing', { ...oldTask, status: 'Doing' });
            doingColumn.appendChild(newTaskElement);
        }

        function moveTaskToDone(taskName) {
            removeTaskFromAllColumns(taskName);
            const oldTask = tasks.find(task => task.name === taskName);
            tasks = tasks.filter(task => task.name !== taskName);
            tasks.push({ ...oldTask, status: 'Done' });

            const doneColumn = document.getElementById('done');
            const newTaskElement = createTaskElement(taskName, 'Done', { ...oldTask, status: 'Done' });
            doneColumn.appendChild(newTaskElement);
        }

        function moveTaskToAllTasks(taskName) {
            removeTaskFromAllColumns(taskName);
            const oldTask = tasks.find(task => task.name === taskName);
            tasks = tasks.filter(task => task.name !== taskName);
            tasks.push({ ...oldTask, status: 'View All Tasks' });
        }

        function moveTaskToTodo(taskName) {
            removeTaskFromAllColumns(taskName);
            const oldTask = tasks.find(task => task.name === taskName);
            tasks = tasks.filter(task => task.name !== taskName);
            tasks.push({ ...oldTask, status: 'To Do' });

            const todoColumn = document.getElementById('todo');
            const newTaskElement = createTaskElement(taskName, 'To Do', { ...oldTask, status: 'To Do' });
            todoColumn.appendChild(newTaskElement);
        }

        function removeTaskFromAllColumns(taskName) {
            ['todo', 'doing', 'done'].forEach(colId => {
                const col = document.getElementById(colId);
                const taskElem = Array.from(col.children).find(child => child.getAttribute('data-task-name') === taskName);
                if (taskElem) col.removeChild(taskElem);
            });
        }

        function renderAllTasksModal() {
            const modalBody = document.getElementById('allTasksModalBody');
            modalBody.innerHTML = '';
            if (tasks.length === 0) {
                modalBody.innerHTML = '<p>No tasks available.</p>';
                return;
            }
            const list = document.createElement('ul');
            list.className = 'list-group';
            tasks.forEach(task => {
                const item = document.createElement('li');
                item.className = 'list-group-item d-flex justify-content-between align-items-center';
                item.innerText = task.name; // <-- Only show the name
                if (task.status === 'View All Tasks') {
                    const restoreBtn = document.createElement('button');
                    restoreBtn.className = 'btn btn-secondary btn-sm';
                    restoreBtn.innerText = 'Restore';
                    restoreBtn.onclick = function () {
                        moveTaskToTodo(task.name);
                        $('#viewAllTasksModal').modal('hide');
                    };
                    item.appendChild(restoreBtn);
                }
                list.appendChild(item);
            });
            modalBody.appendChild(list);
        }
    </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>